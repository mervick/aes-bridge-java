name: Maven Publish

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Permissions required for GITHUB_TOKEN
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: 'maven'
          server-id: central
          server-username: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          server-password: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Publish to Maven Central
        run: mvn -f aesbridge/pom.xml --batch-mode clean deploy -P release -Dgpg.signer=bc -e -X
        env:
          MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          MAVEN_GPG_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

        # echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        # echo "allow-loopback-tty" >> ~/.gnupg/gpg-agent.conf # Для новых GPG
        # echo "allow-sign-with-unprotected-key" >> ~/.gnupg/gpg-agent.conf # Если ключ без пароля
        # echo GPG_TTY=$(tty) >> ~/.bashrc # Добавим GPG_TTY в окружение для gpg agent
        # echo export GPG_TTY=$(tty) >> ~/.bashrc # Добавим GPG_TTY в окружение для gpg
        # gpgconf --kill all # Убиваем старые агенты, чтобы применились изменения
        # gpg --batch --import <(echo "$GPG_PRIVATE_KEY") # Импортируем ключ. Используем <() для передачи строки как файла.
        # echo "GPG key imported."

      # # Configure Maven settings.xml for Sonatype OSSRH.
      # - name: Configure Maven settings.xml
      #   uses: s4u/maven-settings-action@v3.1.0
      #   with:
      #     sonatypeSnapshots: true
      #     servers: |
      #       [{ "id": "ossrh", "username": "${{ secrets.MAVEN_CENTRAL_USERNAME }}", "password": "${{ secrets.MAVEN_CENTRAL_PASSWORD }}" }]

      # - name: Verify package
      #   run: mvn -f aesbridge/pom.xml --batch-mode verify

      # # Deploy the Maven package.
      # - name: Deploy to Maven Central
      #   run: mvn -f aesbridge/pom.xml --batch-mode deploy -P release -DskipTests=true -Dgpg.signer=bc -e
      #   env:
      #     MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
      #     MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
      #     MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      #     MAVEN_GPG_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      #     # Дополнительные переменные окружения для GPG
      #     # GPG_TTY: $(tty) # Убедитесь, что GPG_TTY установлен для этой команды
      #     # GPG_AGENT_INFO: "" # Сбрасываем GPG_AGENT_INFO для чистоты
      #     # Опционально: Иногда помогает указать pinentry mode напрямую
      #     # GPG_OPTS: --pinentry-mode loopback

      # - name: Deploy to Maven Central
      #   # run: mvn --batch-mode deploy -Possrh -DskipTests=true -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}"
      #   # run: mvn --batch-mode deploy -Possrh -DskipTests=true
      #   run: mvn -f aesbridge/pom.xml --batch-mode --no-transfer-progress clean deploy -P release -DskipTests -Dgpg.signer=bc -e
      #   env:
      #     MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
      #     MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
      #     MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      #     MAVEN_GPG_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Manual Release Confirmation
        run: |
          echo "Deployment to Sonatype OSSRH staging repository completed."
          echo "Please log into https://oss.sonatype.org/ and manually 'Close' then 'Release' your staging repository."
        if: success() && github.event_name == 'release' && github.event.action == 'published'
